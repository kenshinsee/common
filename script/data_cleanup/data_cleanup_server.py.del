#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import time
import json
from tornado.web import RequestHandler
from concurrent.futures import ThreadPoolExecutor
from tornado.concurrent import run_on_executor
from log.logger import Logger
from common.step_status import StepStatus
from DataCleanup import DataCleanupWrapper

MAX_WORKERS = 123
logger = Logger(log_level="INFO", target="console", module_name="data_cleanup_service")


class DataCleanupHandler(RequestHandler):
    """
    Handle Data Cleanup by HTTP POST request
    POST body like
    {
        "jobId": 3456789,
        "stepId": 1,
        "batchId": 1,
        "retry": 0,
        "log_level": 20,
        "configJson": "[{'type': 'TABLE', 'excludeSchema': ['QA_AHOLD','QA_LOBCA'], 'namePattern': ['AFM_RULES_FEEDBACK_STAGE_\\d+', 'FACT_PROCESSED_ALERT_SWAP_\\d+_\\d+']},{'type': 'DATA', 'reserveDays': 90, 'excludeSchema': ['QA_AHOLD','QA_LOBCA'], 'partitionTable': {'SEQ_NUM': ['FACT_RAW_ALERT', 'FACT_OSM_STORE'], 'PERIOD_KEY': []}}]"
    }
    configJson: mandatory
    log_level: optional - default 20 AS Info, refer logging level
    """
    executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)

    def initialize(self, meta):
        self._logger = logger
        self._meta = meta.copy()
        self._request_body = json.loads(self.request.body.decode('utf-8'))
        self._request_body["log_level"] = self._request_body.get("log_level", 20)
        self._logger.set_level(self._request_body["log_level"])
        self._logger.set_keys(log_id="{}_{}".format(self._request_body["jobId"], self._request_body["stepId"]))
        self._logger.debug(self._request_body)
        self._request_body["header"] = {"Content-Type": "application/json",
                                        "module_name": self._logger.format_dict["module_name"]}
        self._request_body["config_json"] = self._request_body["configJson"]

    @run_on_executor
    def data_cleanup(self):
        data_cleanup = DataCleanupWrapper(meta={**self._meta, **{"logger": self._logger}}.copy())
        data_cleanup.on_action(self._request_body.copy())

    def post(self, *args, **kwargs):
        self.data_cleanup()
        self.set_header('Content-Type', 'application/json')
        self._request_body["status"] = StepStatus.RUNNING.value
        self._request_body["message"] = '{}: Data Cleanup is processing with parameters {}'.format(
            time.asctime(time.localtime(time.time())), self._request_body)
        self.write(json.dumps(self._request_body))
        self.flush()
